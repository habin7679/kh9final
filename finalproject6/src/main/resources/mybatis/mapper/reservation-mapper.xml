<?xml version="1.0" encoding="UTF-8"?>

<!-- mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다. - myBatis를 이용하는 개발자는 이곳에 저장된 
	SQL구문을 '아이디'를 이용해서 호출한다. - 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 
	사용한다. - 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다. - 
	일반적으로 namespace는 테이블명으로 한다. - mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다. - <insert> 
	- <update> - <select> - <delete> - 각 구문은 반드시 아이디를 가져야 한다. - 각 구문에는 다음과 같은 
	속성을 작성할 수 있다. - parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택) 
	- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수) - (주의) List이든 아니든 
	DTO의 형태를 작성한다(모르는 부분을 알려준다, 매핑되는 객체의 형태) - 각 구문에는 데이터를 다음과 같이 바인딩 할 수 있다. 
	- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다. - 동적 바인딩 : 
	#{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다.(DTO 변수명) -->
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="reservation">
	<select id="sequence" resultType="int">
		select reservation_seq.nextval from dual
	</select>

	<insert id="insert" parameterType="ReservationDto">
		insert into reservation(
		reservation_people, reservation_price, reservation_content,
		reservation_time, store_no, member_no, reservation_no, reservation_date
		)
		values(
		#{reservationPeople}, #{reservationPrice}, #{reservationContent},
		#{reservationTime}, #{storeNo}, #{memberNo}, #{reservationNo}, #{reservationDate}
		)
	</insert>

	<select id="one" resultType="ReservationDto" parameterType="int">
		select * from reservation where reservation_no = #{reservation}
	</select>

	<update id="status" parameterType="int">
		update reservation
		set
		reservation_status = '완료'
		where
		reservation_no = #{reservationNo}
	</update>

	<update id="cancel" parameterType="int">
		update reservation
		set
		reservation_status = '취소'
		where
		reservation_no = #{reservationNo}
	</update>

	<select id="listStoreNo" resultType="ReservationMemberCheckVO"
		parameterType="int">
		select
			R.reservation_date, R.reservation_people, R.reservation_time,
			M.member_name, M.member_phone, M.member_id, R.reservation_price,
			R.reservation_visit_state, R.store_no, p.payment_no, R.reservation_no
		from reservation R 
		    left outer join member M on M.member_no = R.member_no
		    left outer join payment P on R.reservation_no = P.reservation_no
		where R.store_no = #{storeNo}
			and 
			R.reservation_status = '완료' 
			and
			R.reservation_visit_state = 0
		order by reservation_date desc
	</select>
	
	<update id="visitUpdate" parameterType="int">
		update reservation set reservation_visit_state = 1 where reservation_no = #{reservationNo}
	</update>


	<select id="myReservation" resultType="MyReservationVO" parameterType="int">
	select
	R.reservation_date, R.reservation_people, R.reservation_time,
	M.member_name, M.member_phone, M.member_nick, R.reservation_price,
	R.reservation_visit_state, P.payment_no, S.store_name,
	R.reservation_content,
	s.store_address, s.store_post, s.store_detail_address
	from reservation R 
	    left outer join member M on M.member_no = R.member_no
	    left outer join store S on R.store_no = S.store_no
	    left outer join payment P on P.reservation_no = R.reservation_no 
	    where R.member_no = ${memberNo} and R.reservation_status = '완료' and P.payment_status = '완료' and r.reservation_visit_state = 0
	order by reservation_date desc
	</select>
</mapper>