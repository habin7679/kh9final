<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다.
	- myBatis를 이용하는 개발자는 이곳에 저장된 SQL구문을 '아이디'를 이용해서 호출한다.
	- 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 사용한다.
 	- 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다.
 	- 일반적으로 namespace는 테이블명으로 한다.
 	- mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다.
 		- <insert>
 		- <update>
 		- <select>
 		- <delete>
 	- 각 구문은 반드시 아이디를 가져야 한다.
 	- 각 구문에는 다음과 같은 속성을 작성할 수 있다.
 		- parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택)
 		- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수)
 			- (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 부분을 알려준다, 매핑되는 객체의 형태)
 	- 각 구문에는 데이터를 다음과 같이 바인딩 할 수 있다.
 		- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다.
 		- 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다.(DTO 변수명)
 -->
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
 <mapper namespace="seller">
 	
 	<update id="addPoint" parameterType="Map">
 		update seller set seller_point = seller_point + #{price} where seller_no = #{sellerNo}
 	</update>
 	
 	<select id="one" parameterType="int" resultType="SellerDto">
 		select * from seller where seller_no = #{sellerNo}
 	</select>
 	
 	<select id="sellerNo" parameterType="int" resultType="int">
 		select seller_no from seller where member_no = #{memberNo}
 	</select>
 	
 		<!-- 판매자 시퀀스 -->
	<select id="sequence" resultType="int">
		select seller_seq.nextval from dual
	</select>
	
	
 	<insert id="join" parameterType="SellerDto">
		insert into seller(
		    seller_no, member_no, seller_bank, seller_account, 
		    seller_business_num
		)
		values(
		     #{sellerNo}, #{memberNo}, #{sellerBank}, #{sellerAccount},
		     #{sellerBusinessNum} 
		) 
	</insert>
	
	<select id = "list" resultType = "SellerDto" parameterType = "int">
		select * from seller where member_no = #{memberNo} 
	</select>
	
 	
 	<select id="sellerInfoVO" resultType="SellerInfoVO" parameterType="int">
 	select 
		M.member_name, M.member_id, M.member_pw, M.member_phone,
		s.seller_bank, s.seller_account, s.seller_point
	from seller S
		left outer join member M on M.member_no = S.member_no
	where seller_no = #{sellerNo}
 	
 	</select>
 	<select id="adminlist" resultType="SellerMemberVO" parameterType="Map">
 		select * from (
 			select rownum rn, TMP.* from(
	 			select * from seller S
           		 left outer join member M on M.member_no = S.member_no
	 			<if test="type != null and keyword != null">
	 				<![CDATA[
	 				where instr (M.${type},#{keyword}) > 0
	 				]]>
	 			</if>
	 			<!-- 정렬 -->
	 			order by seller_no desc 
	 			)
						TMP 
 			) where rn between #{begin} and #{end}
 	
 	</select>
 	<select id="count" parameterType="Map" resultType="int">
 		select count(*) from seller S
           		 left outer join member M on M.member_no = S.member_no
 		<if test = "type != null and keyword != null">
 			<![CDATA[
 			where instr (M.${type},#{keyword}) > 0
 			]]>
 		</if>
 	</select>
 	<update id="edit" parameterType="int">
 		update seller set
 			seller_type = '완료'
 		where seller_no = ${sellerNo}
 	</update>
 	
 	<select id="memberNo" parameterType="int" resultType="int">
 		select member_no from seller where seller_no = ${sellerNo}
 	</select>
 	
 	<update id="memberEdit" parameterType="int">
 	update member set
 			member_kind = '판매자'
 		where member_no = ${memberNo}
 	</update>
	<update id="cancel" parameterType="int">
	update seller set
	seller_type = '취소'
	where seller_no = ${sellerNo}
	</update>
	
 </mapper>